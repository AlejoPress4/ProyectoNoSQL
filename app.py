"""
Sistema RAG de Productos Tecnol√≥gicos con MongoDB Atlas
Aplicaci√≥n principal con men√∫ interactivo
"""

import sys
import os

# Agregar el directorio ra√≠z al path para imports
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from config import verify_connection
from scripts import (
    create_all_collections,
    create_all_indexes,
    load_all_data,
    verify_all_data
)


def print_header():
    """Imprime el encabezado de la aplicaci√≥n."""
    print("\n" + "="*70)
    print(" " * 10 + "SISTEMA RAG DE PRODUCTOS TECNOL√ìGICOS")
    print(" " * 15 + "MongoDB Atlas + Embeddings Vectoriales")
    print("="*70 + "\n")


def print_menu():
    """Imprime el men√∫ principal."""
    print("\n" + "-"*70)
    print("MEN√ö PRINCIPAL")
    print("-"*70)
    print("  [1] Crear colecciones con validaci√≥n de esquema")
    print("  [2] Crear √≠ndices")
    print("  [3] Cargar datos completos (marcas ‚Üí categor√≠as ‚Üí usuarios ‚Üí productos ‚Üí rese√±as ‚Üí im√°genes)")
    print("  [4] Verificar datos cargados")
    print("  [5] Ejecutar setup completo (1 ‚Üí 2 ‚Üí 3)")
    print("  [6] Verificar conexi√≥n a MongoDB")
    print("  [0] Salir")
    print("-"*70)


def option_1_create_collections():
    """Opci√≥n 1: Crear colecciones."""
    print("\n" + "üî® Creando colecciones...")
    try:
        success = create_all_collections()
        if success:
            print("\n‚úÖ Colecciones creadas exitosamente")
            input("\nPresiona Enter para continuar...")
        else:
            print("\n‚ùå Error al crear colecciones")
            input("\nPresiona Enter para continuar...")
    except Exception as e:
        print(f"\n‚ùå Error: {str(e)}")
        input("\nPresiona Enter para continuar...")


def option_2_create_indexes():
    """Opci√≥n 2: Crear √≠ndices."""
    print("\n" + "üî® Creando √≠ndices...")
    try:
        success = create_all_indexes()
        if success:
            print("\n‚úÖ √çndices creados exitosamente")
            input("\nPresiona Enter para continuar...")
        else:
            print("\n‚ùå Error al crear √≠ndices")
            input("\nPresiona Enter para continuar...")
    except Exception as e:
        print(f"\n‚ùå Error: {str(e)}")
        input("\nPresiona Enter para continuar...")


def option_3_load_data():
    """Opci√≥n 3: Cargar datos."""
    print("\n" + "üî® Cargando datos...")
    print("\n‚ö†Ô∏è  ADVERTENCIA: Este proceso puede tomar varios minutos")
    print("    Se generar√°n embeddings para todos los productos y rese√±as")
    
    confirm = input("\n¬øDeseas continuar? (s/n): ").strip().lower()
    
    if confirm == 's' or confirm == 'si' or confirm == 's√≠':
        try:
            success = load_all_data()
            if success:
                print("\n‚úÖ Datos cargados exitosamente")
                input("\nPresiona Enter para continuar...")
            else:
                print("\n‚ùå Error al cargar datos")
                input("\nPresiona Enter para continuar...")
        except Exception as e:
            print(f"\n‚ùå Error: {str(e)}")
            input("\nPresiona Enter para continuar...")
    else:
        print("\n‚ùå Operaci√≥n cancelada")
        input("\nPresiona Enter para continuar...")


def option_4_verify_data():
    """Opci√≥n 4: Verificar datos."""
    print("\n" + "üîç Verificando datos...")
    try:
        success = verify_all_data()
        if success:
            print("\n‚úÖ Verificaci√≥n completada")
            input("\nPresiona Enter para continuar...")
        else:
            print("\n‚ùå Error en la verificaci√≥n")
            input("\nPresiona Enter para continuar...")
    except Exception as e:
        print(f"\n‚ùå Error: {str(e)}")
        input("\nPresiona Enter para continuar...")


def option_5_full_setup():
    """Opci√≥n 5: Setup completo."""
    print("\n" + "üöÄ SETUP COMPLETO DEL SISTEMA")
    print("\nEste proceso ejecutar√°:")
    print("  1. Crear colecciones con validaci√≥n")
    print("  2. Crear √≠ndices")
    print("  3. Cargar todos los datos con embeddings")
    
    print("\n‚ö†Ô∏è  ADVERTENCIA: Este proceso puede tomar 10-15 minutos")
    print("    y eliminar√° todos los datos existentes en las colecciones")
    
    confirm = input("\n¬øDeseas continuar? (s/n): ").strip().lower()
    
    if confirm == 's' or confirm == 'si' or confirm == 's√≠':
        try:
            print("\n" + "="*70)
            print("INICIANDO SETUP COMPLETO")
            print("="*70)
            
            # Paso 1: Crear colecciones
            print("\nüîπ PASO 1/3: Creando colecciones...")
            success_1 = create_all_collections()
            
            if not success_1:
                print("\n‚ùå Error en Paso 1. Setup cancelado.")
                input("\nPresiona Enter para continuar...")
                return
            
            # Paso 2: Crear √≠ndices
            print("\nüîπ PASO 2/3: Creando √≠ndices...")
            success_2 = create_all_indexes()
            
            if not success_2:
                print("\n‚ùå Error en Paso 2. Setup cancelado.")
                input("\nPresiona Enter para continuar...")
                return
            
            # Paso 3: Cargar datos
            print("\nüîπ PASO 3/3: Cargando datos con embeddings...")
            success_3 = load_all_data()
            
            if not success_3:
                print("\n‚ùå Error en Paso 3. Setup cancelado.")
                input("\nPresiona Enter para continuar...")
                return
            
            # Todo exitoso
            print("\n" + "="*70)
            print("‚úÖ SETUP COMPLETO EXITOSO")
            print("="*70)
            print("\nüéâ El sistema est√° listo para usar")
            print("\nPuedes usar la opci√≥n [4] para verificar los datos cargados")
            input("\nPresiona Enter para continuar...")
            
        except Exception as e:
            print(f"\n‚ùå Error durante el setup: {str(e)}")
            input("\nPresiona Enter para continuar...")
    else:
        print("\n‚ùå Operaci√≥n cancelada")
        input("\nPresiona Enter para continuar...")


def option_6_verify_connection():
    """Opci√≥n 6: Verificar conexi√≥n."""
    print("\n" + "üîç Verificando conexi√≥n a MongoDB Atlas...")
    try:
        success = verify_connection()
        if success:
            print("\n‚úÖ Conexi√≥n exitosa")
            input("\nPresiona Enter para continuar...")
        else:
            print("\n‚ùå Error de conexi√≥n")
            print("\nAseg√∫rate de:")
            print("  1. Tener configurado correctamente el archivo .env")
            print("  2. Tener acceso a internet")
            print("  3. Que tu IP est√© autorizada en MongoDB Atlas")
            input("\nPresiona Enter para continuar...")
    except Exception as e:
        print(f"\n‚ùå Error: {str(e)}")
        print("\nAseg√∫rate de:")
        print("  1. Tener configurado correctamente el archivo .env")
        print("  2. Tener acceso a internet")
        print("  3. Que tu IP est√© autorizada en MongoDB Atlas")
        input("\nPresiona Enter para continuar...")


def clear_screen():
    """Limpia la pantalla de la terminal."""
    os.system('cls' if os.name == 'nt' else 'clear')


def main():
    """Funci√≥n principal de la aplicaci√≥n."""
    while True:
        try:
            clear_screen()
            print_header()
            print_menu()
            
            opcion = input("\nSelecciona una opci√≥n: ").strip()
            
            if opcion == '1':
                option_1_create_collections()
            elif opcion == '2':
                option_2_create_indexes()
            elif opcion == '3':
                option_3_load_data()
            elif opcion == '4':
                option_4_verify_data()
            elif opcion == '5':
                option_5_full_setup()
            elif opcion == '6':
                option_6_verify_connection()
            elif opcion == '0':
                print("\nüëã ¬°Hasta luego!")
                print("="*70 + "\n")
                sys.exit(0)
            else:
                print("\n‚ùå Opci√≥n inv√°lida. Por favor selecciona una opci√≥n del men√∫.")
                input("\nPresiona Enter para continuar...")
                
        except KeyboardInterrupt:
            print("\n\nüëã Programa interrumpido por el usuario")
            print("="*70 + "\n")
            sys.exit(0)
        except Exception as e:
            print(f"\n‚ùå Error inesperado: {str(e)}")
            import traceback
            traceback.print_exc()
            input("\nPresiona Enter para continuar...")


if __name__ == "__main__":
    main()
